/* 100% original code by Yeo Guo Hong and Simon Wong
 * Copyrighted 2018 DO NOT STEAL */

/* LIGHT_THRESHOLD*: 3000 lux
 * TEMP_THRESHOLD*: 28oC
 * ACC_THRESHOLD*: 0.1g
 * Note :	Please do not damage the board by subjecting it to mechanical stress.
			The requisite threshold can be easily met by shaking the board slightly.
 * BLINK_BLUE: Blue Light for RGB LED, alternating between ON and OFF every 1 second.
 * ALTERNATE_LED: The blue and red LEDs alternate every 500 milliseconds. The Green LED should be off throughout. */

/* To do list:
 *
 * [DONE]
 * - Find out how to make the red LED stop lighting up (Changed GPIO_SetDir in rgb.c)
 * - Check if there is a way to make both OLED and green LED separate (currently tied by P2.1) (Just don't initialize green LED)
 * - Double check the conversion from acc_read values to g-values (Checked; it's correct)
 * - Optimise COUNTDOWN(), light_values (Ye, done)
 * - Find out the argument in temp_init() to initialize it (Done, I don't even know what was the issue before)
 *
 * [PENDING]
 * - ALTERNATE_RED does not blink every 500ms; could be because of lag
 * - Fix COUNTDOWN skip when user presses sw3 during COUNTDOWN()
 * - Figure out how to use EINT3 interrupt for MODE_TOGGLE (optional)
 * - Include UART support
 * - Think of enhancement
 * - Do the lab report lmao
 * - HOLY SHIT WE NEED TO CHANGE EVERYTHING AAAAAAAAAAA
 *
 */

#include "LPC17xx.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"

#include "acc.h"
#include "led7seg.h"
#include "light.h"
#include "oled.h"
#include "pca9532.h"
#include "rgb.h"
#include "temp.h"

#include <stdio.h>
#include <math.h>
#include <string.h>



volatile uint32_t msTicks; 									// Counter for 1ms SysTicks
uint32_t currentTicks = 0, tempTicks = 0;

uint8_t MODE_TOGGLE = 1, MODE_TOGGLE_counter = 0, MODE_TOGGLE_counter2 = 0;
uint8_t EMERGENCY_OVER = 1;

int8_t acc_x = 0, acc_y = 0, acc_z = 0;
int8_t acc_x_init = 0, acc_y_init = 0, acc_z_init = 0;
float acc_net_sq = 0.0, g_value = 0.0;
float ACC_THRESHOLD = 0.1;

char oled_init1[] = "Initialisation",
	oled_init2[] = "mode. Press",
	oled_init3[] = "TOGGLE to climb",

	oled_toggle1[] = "INITIALISATION",
	oled_toggle2[] = "COMPLETE.",
	oled_toggle3[] = "ENTERING CLIMB",
	oled_toggle4[] = "MODE",

	oled_climb[] = "CLIMB",
	oled_acc[] = "",
	oled_light[] = "",
	oled_dim[] = "DIM",
	oled_temp[] = "",
	oled_restnow[] = "REST NOW",

	oled_emergency[] = "EMERGENCY Mode!",
	oled_emergency_acc[] = "",
	oled_emergency_duration[] = "",
	oled_emergency_temp[] = "",

	oled_emergency_saved1[] = "Emergency",
	oled_emergency_saved2[] = "clear!",

	oled_blank[] = "              ";

uint32_t light_value = 0;
uint32_t LIGHT_THRESHOLD = 3000;

int32_t temp_value = 0;
float temp_value_c = 0.0;
int temp_threshold_counter = 0;
float TEMP_THRESHOLD = 25.0;

float elapsed_ms = 0.0, elapsed = 0.0;



//void AMBIENT_LIGHT_DETECTION(void);		// Putting my function prototypes here, like what any good programmer should do
//void COUNTDOWN(void);
void EMERGENCY_MODE(void);
uint32_t GETMSTICKS(void);
void REST_NOW(void);
void RGB_INIT(void);
void RGB_SETLED(uint8_t LedMask);
void SAVED(void);



static void init_ssp(void) {

	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */

	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);

}

static void init_i2c(void) {

	PINSEL_CFG_Type PinCfg;

	/* Initialize I2C2 pin connect */
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);

	// Initialize I2C peripheral
	I2C_Init(LPC_I2C2, 100000);

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C2, ENABLE);

}

static void init_GPIO(void) {

	PINSEL_CFG_Type PinCfg;						// Initialize button

	PinCfg.Funcnum = 0;							// Initializing EMERGENCY_OVER
	PinCfg.Pinnum = 31;
	PinCfg.Portnum = 1;
	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(1, (1 << 31), 0);

	PinCfg.Funcnum = 0;							// Initializing MODE_TOGGLE
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(2, (1 << 10), 0);

}

void EINT3_IRQHandler(void) {

	if ((LPC_GPIOINT -> IO2IntStatF >> 10) & 0x1) {
		LPC_GPIOINT -> IO2IntClr = 1 <<10;
	}
}

void SysTick_Handler(void) {					// Just increment SysTick counter

	msTicks++;

}

__INLINE static void systick_delay (uint32_t delayTicks) {	// Creates a delay of the appropriate number of Systicks (happens every 1 ms)

	uint32_t currentTicks;
	currentTicks = msTicks;									// reads current tick counter

	while ((msTicks - currentTicks) < delayTicks);			// Now loop until required number of ticks passes
															// *** DON'T CHANGE TO IF, WILL BREAK EVERYTHING ***
}



//void AMBIENT_LIGHT_DETECTION(void) {
//
//	int i = 0, counter = 16;
//	float param = 1.4;
//
//	for (i = 15; i >= 0; i--) {
//		if (light_value <= (LIGHT_THRESHOLD / pow(param, i))) {
//			counter = 15 - i;
//			break;
//		}
//	}
//
//	pca9532_setLeds((0b1111111111111111 >> counter), 0xFFFF);
//
////	if (light_value <= 17) {pca9532_setLeds(0xFFFF, 0xFFFF);}				// ^ what the above code means
////	else if (light_value <= 23) {pca9532_setLeds(0x7FFF, 0xFFFF);}			// The reason why I put these particular light_values is that light works in a logarithmic scale
////	else if (light_value <= 33) {pca9532_setLeds(0x3FFF, 0xFFFF);}			// Hence, you cannot split the light values evenly from 0 to 300 lux because then the LEDs will not light up proportionately
////	else if (light_value <= 47) {pca9532_setLeds(0x1FFF, 0xFFFF);}			// Here, I reduced each value by a factor of sqrt(2)
////	else if (light_value <= 66) {pca9532_setLeds(0x0FFF, 0xFFFF);}
////	else if (light_value <= 94) {pca9532_setLeds(0x07FF, 0xFFFF);}
////	else if (light_value <= 133) {pca9532_setLeds(0x03FF, 0xFFFF);}
////	else if (light_value <= 188) {pca9532_setLeds(0x01FF, 0xFFFF);}
////	else if (light_value <= 265) {pca9532_setLeds(0x00FF, 0xFFFF);}
////	else if (light_value <= 375) {pca9532_setLeds(0x007F, 0xFFFF);}
////	else if (light_value <= 530) {pca9532_setLeds(0x003F, 0xFFFF);}
////	else if (light_value <= 750) {pca9532_setLeds(0x001F, 0xFFFF);}
////	else if (light_value <= 1060) {pca9532_setLeds(0x000F, 0xFFFF);}
////	else if (light_value <= 1500) {pca9532_setLeds(0x0007, 0xFFFF);}
////	else if (light_value <= 2120) {pca9532_setLeds(0x0003, 0xFFFF);}
////	else if (light_value <= 3000) {pca9532_setLeds(0x0001, 0xFFFF);}
////	else {pca9532_setLeds(0x0000, 0xFFFF);}
//
//}

//void COUNTDOWN(void) {
//
//	int i = 9;
//	char seven_seg = ' ';
//
//	currentTicks = msTicks;
//	oled_clearScreen(OLED_COLOR_BLACK);
//
//	oled_putString(0, 0, (uint8_t*) oled_toggle1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//	oled_putString(0, 10, (uint8_t*) oled_toggle2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//	oled_putString(0, 20, (uint8_t*) oled_toggle3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//	oled_putString(0, 30, (uint8_t*) oled_toggle4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//
//	for (i = 9; i >= 0; i--) {			// 7-segment decrements from 9 to 0
//
//		seven_seg = i + '0';
//		led7seg_setChar(seven_seg, FALSE);
//
//		if ((msTicks - currentTicks) % 2000 <= 1000) {		// BLINK_BLUE function
//			RGB_SETLED(2);
//		}
//
//		else {
//			RGB_SETLED(0);
//		}
//
//		systick_delay(500);
//
//	}
//
//	led7seg_setChar(' ', FALSE);
//	RGB_SETLED(0);
//	oled_clearScreen(OLED_COLOR_BLACK);
//
//}

void EMERGENCY_MODE(void) {

	uint32_t currentTicks = 0;
	float elapsed_ms = 0.0, elapsed = 0.0;

	currentTicks = msTicks;
	oled_clearScreen(OLED_COLOR_BLACK);
	oled_putString(0, 0, (uint8_t*) oled_emergency, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	pca9532_setLeds(0x0000, 0xFFFF);

	while (1) {

		MODE_TOGGLE = (GPIO_ReadValue(2) >> 10) & 0x1;
		EMERGENCY_OVER = (GPIO_ReadValue(1) >> 31) & 0x1;

		acc_read(&acc_x, &acc_y, &acc_z);
		acc_net_sq = pow(acc_x - acc_x_init, 2) + pow(acc_y - acc_y_init, 2) + pow(acc_z - acc_z_init, 2);
		g_value = sqrt(acc_net_sq) / 64;
		light_value = light_read();
		temp_value = temp_read();
		temp_value_c = temp_value;
		elapsed_ms = msTicks - currentTicks;
		elapsed = elapsed_ms / 1000;

		sprintf(oled_emergency_acc, "Acc: %4.2f g", g_value);
		oled_putString(0, 20, (uint8_t*) oled_emergency_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
		sprintf(oled_emergency_temp, "Temp: %4.1f deg", temp_value_c/10);
		oled_putString(0, 30, (uint8_t*) oled_emergency_temp, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
		sprintf(oled_emergency_duration, "Time: %5.1f s", elapsed);
		oled_putString(0, 50, (uint8_t*) oled_emergency_duration, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

		if ((msTicks - currentTicks) % 1000 <= 500) {		// ALTERNATE_LED function
			RGB_SETLED(2);
		}

		else {
			RGB_SETLED(1);
		}

		if (MODE_TOGGLE == 0 && EMERGENCY_OVER == 0) {
			SAVED();
			break;
		}
	}

	oled_clearScreen(OLED_COLOR_BLACK);
	RGB_SETLED(0);

}

uint32_t GETMSTICKS(void) {

	return msTicks;

}

//void REST_NOW(void) {
//
//	oled_clearScreen(OLED_COLOR_BLACK);
//
//	oled_putString(0, 0, (uint8_t*) oled_restnow, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//	systick_delay(3000);
//
//	oled_clearScreen(OLED_COLOR_BLACK);
//
//}

void RGB_INIT(void) {

    GPIO_SetDir( 2, (1<<0), 1 );			// red
    GPIO_SetDir( 0, (1<<26), 1 );			// blue

}

void RGB_SETLED(uint8_t LedMask) {

    if ((LedMask & RGB_RED) != 0) {
        GPIO_SetValue(2, (1<<0));
    }

    else {
        GPIO_ClearValue(2, (1<<0) );
    }



    if ((LedMask & RGB_BLUE) != 0) {
        GPIO_SetValue(0, (1<<26));
    }

    else {
        GPIO_ClearValue(0, (1<<26));
    }

}

//void SAVED(void) {
//
//	int i = 0;
//
//	oled_clearScreen(OLED_COLOR_BLACK);
//	oled_putString(0, 0, (uint8_t*) oled_emergency_saved1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//	oled_putString(0, 10, (uint8_t*) oled_emergency_saved2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//
//	for (i = 4; i >= 0; i--) {
//
//		switch(i) {
//
//			case(4): {
//				led7seg_setChar('S', FALSE);
//				RGB_SETLED(2);
//				break;
//			}
//
//			case(3): {
//				led7seg_setChar('A', FALSE);
//				break;
//			}
//
//			case(2): {
//				led7seg_setChar('U', FALSE);
//				RGB_SETLED(0);
//				break;
//			}
//
//			case(1): {
//				led7seg_setChar('E', FALSE);
//				break;
//			}
//
//			case(0): {
//				led7seg_setChar('D', FALSE);
//				RGB_SETLED(2);
//				break;
//			}
//
//			default: {
//				RGB_SETLED(0);
//				break;
//			}
//		}
//
//		systick_delay(500);
//
//	}
//
//	oled_clearScreen(OLED_COLOR_BLACK);
//	led7seg_setChar(' ', FALSE);
//	RGB_SETLED(0);
//
//}



int main(void) {

	int i = 0, counter = 16;
	float param = 1.4;
	char seven_seg = ' ';

	init_i2c();												// Initializing core peripherals
	init_GPIO();
	init_ssp();

	LPC_GPIOINT->IO2IntEnF |= 1<<10;						// Enable GPIO Interrupt P2.10
	NVIC_EnableIRQ(EINT3_IRQn);								// Enable EINT3 interrupt

	if (SysTick_Config(SystemCoreClock / 1000)) {
		while (1);  										// Capture error
	}

	acc_init();												// Initializing external peripherals + clearing them
	led7seg_init();
	led7seg_setChar(' ', FALSE);
	light_enable();
	light_setRange(LIGHT_RANGE_16000);
	oled_init();
	oled_clearScreen(OLED_COLOR_BLACK);
	RGB_INIT();
	temp_init(&GETMSTICKS);

	oled_putString(0, 0, (uint8_t*) oled_init1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(0, 10, (uint8_t*) oled_init2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(0, 20, (uint8_t*) oled_init3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



	while (1) {

		MODE_TOGGLE = (GPIO_ReadValue(2) >> 10) & 0x1;
		EMERGENCY_OVER = (GPIO_ReadValue(1) >> 31) & 0x1;

		if (MODE_TOGGLE == 0) {						// Prevents COUNTDOWN from activating again if you press MODE_TOGGLE more than once

			MODE_TOGGLE_counter++;

		}

		if (MODE_TOGGLE_counter == 1) {				// When MODE_TOGGLE (MODE_TOGGLE) is pressed, device transitions to CLIMB mode



//			***** COUNTDOWN function START *****

			currentTicks = msTicks;
			oled_clearScreen(OLED_COLOR_BLACK);

			oled_putString(0, 0, (uint8_t*) oled_toggle1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			oled_putString(0, 10, (uint8_t*) oled_toggle2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			oled_putString(0, 20, (uint8_t*) oled_toggle3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			oled_putString(0, 30, (uint8_t*) oled_toggle4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			for (i = 9; i >= 0; i--) {			// 7-segment decrements from 9 to 0

				seven_seg = i + '0';
				led7seg_setChar(seven_seg, FALSE);



//				***** BLINK_BLUE function START *****

				if ((msTicks - currentTicks) % 2000 <= 1000) {

					RGB_SETLED(2);

				}

				else {

					RGB_SETLED(0);

				}

//				***** BLINK_BLUE function END *****



				tempTicks = msTicks;
				while ((msTicks - tempTicks) <= 500);				// Todo: optimise

			}

			led7seg_setChar(' ', FALSE);
			RGB_SETLED(0);
			oled_clearScreen(OLED_COLOR_BLACK);

//			***** COUNTDOWN function END *****



			acc_read(&acc_x_init, &acc_y_init, &acc_z_init);
			oled_putString(0, 0, (uint8_t*) oled_climb, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			MODE_TOGGLE_counter++;
			MODE_TOGGLE_counter2++;

		}

		if ((MODE_TOGGLE_counter > 1) && (MODE_TOGGLE_counter2 > 0)) {			// After transition, device is in CLIMB mode
																				// Prevents going to CLIMB mode prematurely if you spam sw3 during COUNTDOWN
			acc_read(&acc_x, &acc_y, &acc_z);
			acc_net_sq = pow(acc_x - acc_x_init, 2) + pow(acc_y - acc_y_init, 2) + pow(acc_z - acc_z_init, 2);
			g_value = sqrt(acc_net_sq) / 64;
			light_value = light_read();
			temp_value = temp_read();
			temp_value_c = temp_value;

			sprintf(oled_climb, "CLIMB");
			oled_putString(0, 0, (uint8_t*) oled_climb, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			sprintf(oled_acc, "Acc: %4.2f g", g_value);
			oled_putString(0, 20, (uint8_t*) oled_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			sprintf(oled_light, "Light: %5lu lx", light_value);
			oled_putString(0, 30, (uint8_t*) oled_light, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			sprintf(oled_temp, "Temp: %4.1f deg", temp_value_c/10);
			oled_putString(0, 40, (uint8_t*) oled_temp, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



			// ***** AMBIENT_LIGHT_DETECTION function START *****

			for (i = 15; i >= 0; i--) {

				if (light_value <= (LIGHT_THRESHOLD / pow(param, i))) {

					counter = 15 - i;
					break;

				}
			}

			pca9532_setLeds((0b1111111111111111 >> counter), 0xFFFF);

			// ***** AMBIENT_LIGHT_DETECTION function END *****



			if (light_value < LIGHT_THRESHOLD) {

				oled_putString(0, 10, (uint8_t*) oled_dim, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			}

			else {

				oled_putString(0, 10, (uint8_t*) oled_blank, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			}

			if (temp_value_c/10 > TEMP_THRESHOLD) {

				if (temp_threshold_counter == 0) {			// Prevents REST_NOW from activating every time TEMP_THRESHOLD is crossed



					// ***** REST_NOW function START *****

					oled_clearScreen(OLED_COLOR_BLACK);

					oled_putString(0, 0, (uint8_t*) oled_restnow, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
					systick_delay(3000);

					oled_clearScreen(OLED_COLOR_BLACK);

					// ***** REST_NOW function END *****



					temp_threshold_counter++;

				}
			}

			else {

				temp_threshold_counter = 0;

			}

			if (g_value >= ACC_THRESHOLD) {



//				***** EMERGENCY_MODE function START *****

				currentTicks = msTicks;

				oled_clearScreen(OLED_COLOR_BLACK);
				oled_putString(0, 0, (uint8_t*) oled_emergency, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
				pca9532_setLeds(0x0000, 0xFFFF);

				while (MODE_TOGGLE || EMERGENCY_OVER) {

					MODE_TOGGLE = (GPIO_ReadValue(2) >> 10) & 0x1;
					EMERGENCY_OVER = (GPIO_ReadValue(1) >> 31) & 0x1;

					acc_read(&acc_x, &acc_y, &acc_z);
					acc_net_sq = pow(acc_x - acc_x_init, 2) + pow(acc_y - acc_y_init, 2) + pow(acc_z - acc_z_init, 2);
					g_value = sqrt(acc_net_sq) / 64;
					light_value = light_read();
					temp_value = temp_read();
					temp_value_c = temp_value;
					elapsed_ms = msTicks - currentTicks;
					elapsed = elapsed_ms / 1000;

					sprintf(oled_emergency_acc, "Acc: %4.2f g", g_value);
					oled_putString(0, 20, (uint8_t*) oled_emergency_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
					sprintf(oled_emergency_temp, "Temp: %4.1f deg", temp_value_c/10);
					oled_putString(0, 30, (uint8_t*) oled_emergency_temp, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
					sprintf(oled_emergency_duration, "Time: %5.1f s", elapsed);
					oled_putString(0, 50, (uint8_t*) oled_emergency_duration, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



//					***** ALTERNATE_LED function START *****

					if ((msTicks - currentTicks) % 1000 <= 500) {

						RGB_SETLED(2);

					}

					else {

						RGB_SETLED(1);

					}

//					***** ALTERNATE_LED function END *****



					if ((MODE_TOGGLE && EMERGENCY_OVER) == 0) {



//						***** SAVED function + BLINK_BLUE function START *****

						oled_clearScreen(OLED_COLOR_BLACK);
						oled_putString(0, 0, (uint8_t*) oled_emergency_saved1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
						oled_putString(0, 10, (uint8_t*) oled_emergency_saved2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

						for (i = 4; i >= 0; i--) {

							switch(i) {

								case(4): {

									led7seg_setChar('S', FALSE);
									RGB_SETLED(2);
									break;

								}

								case(3): {

									led7seg_setChar('A', FALSE);
									break;

								}

								case(2): {

									led7seg_setChar('U', FALSE);
									RGB_SETLED(0);
									break;

								}

								case(1): {

									led7seg_setChar('E', FALSE);
									break;

								}

								case(0): {

									led7seg_setChar('D', FALSE);
									RGB_SETLED(2);
									break;

								}

								default: {

									RGB_SETLED(0);
									break;

								}
							}

							tempTicks = msTicks;
							while ((msTicks - tempTicks) <= 500);				// Todo: optimise

						}

						led7seg_setChar(' ', FALSE);
						oled_clearScreen(OLED_COLOR_BLACK);
						RGB_SETLED(0);
						oled_putString(0, 0, (uint8_t*) oled_climb, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

					}

//					***** SAVED function + BLINK_BLUE function END *****



				}

//				***** EMERGENCY_MODE function END *****



			}
		}
	}
}










































