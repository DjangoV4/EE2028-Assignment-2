/* 100% original code by Yeo Guo Hong and Simon Wong
 * Copyrighted 2018 DO NOT STEAL */

/* LIGHT_THRESHOLD*: 3000 lux
 * TEMP_THRESHOLD*: 28oC
 * ACC_THRESHOLD*: 0.1g
 * Note :	Please do not damage the board by subjecting it to mechanical stress.
			The requisite threshold can be easily met by shaking the board slightly.
 * BLINK_BLUE: Blue Light for RGB LED, alternating between ON and OFF every 1 second.
 * ALTERNATE_LED: The blue and red LEDs alternate every 500 milliseconds. The Green LED should be off throughout. */

/* To do list:
 *
 * 1. Find out how to make the red LED stop lighting up
 * 2. Check if there is a way to make both OLED and green LED separate (currently tied by P2.1)
 * 3. Figure out how to use EINT3 interrupt
 * 4. Double check the conversion from acc_read values to g-values
 * 5. Find out the argment in temp_init() to initialize it
 *
 */

#include "LPC17xx.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"

#include "acc.h"
#include "led7seg.h"
#include "light.h"
#include "oled.h"
#include "pca9532.h"
#include "rgb.h"
#include "temp.h"

#include <stdio.h>
#include <math.h>
#include <string.h>

volatile uint32_t msTicks; 									// Counter for 1ms SysTicks

static void init_ssp(void) {

	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);

}

static void init_i2c(void) {

	PINSEL_CFG_Type PinCfg;

	/* Initialize I2C2 pin connect */
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);

	// Initialize I2C peripheral
	I2C_Init(LPC_I2C2, 100000);

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C2, ENABLE);

}

static void init_GPIO(void) {

	PINSEL_CFG_Type PinCfg;									// Initialize button

	PinCfg.Funcnum = 0;										// Initializing sw4
	PinCfg.Pinnum = 31;
	PinCfg.Portnum = 1;
	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(1, (1 << 31), 0);

	PinCfg.Funcnum = 0;										// Initializing sw3
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(2, (1 << 10), 0);
}

void EINT3_IRQHandler(void) {

	if ((LPC_GPIOINT -> IO2IntStatF >> 10) & 0x1) {

		LPC_GPIOINT -> IO2IntClr = 1 <<10;

	}
}

void SysTick_Handler(void) {								// Just increment SysTick counter

	msTicks++;

}

__INLINE static void systick_delay (uint32_t delayTicks) {	// Creates a delay of the appropriate number of Systicks (happens every 1 ms)

	uint32_t currentTicks;
	currentTicks = msTicks;									// reads current tick counter

	while ((msTicks - currentTicks) < delayTicks);			// Now loop until required number of ticks passes

}

void COUNTDOWN(void) {

	uint8_t oled_toggle1[] = "INITIALISATION",
			oled_toggle2[] = "COMPLETE.",
			oled_toggle3[] = "ENTERING",
			oled_toggle4[] = "CLIMB MODE";

	oled_clearScreen(OLED_COLOR_BLACK);

	oled_putString(5, 5, &oled_toggle1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(5, 15, &oled_toggle2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(5, 25, &oled_toggle3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(5, 35, &oled_toggle4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

	led7seg_setChar('9', FALSE);
	rgb_setLeds(2);
	systick_delay(500);
	led7seg_setChar('8', FALSE);
	systick_delay(500);
	led7seg_setChar('7', FALSE);
	rgb_setLeds(0);
	systick_delay(500);
	led7seg_setChar('6', FALSE);
	systick_delay(500);
	led7seg_setChar('5', FALSE);
	rgb_setLeds(2);
	systick_delay(500);
	led7seg_setChar('4', FALSE);
	systick_delay(500);
	led7seg_setChar('3', FALSE);
	rgb_setLeds(0);
	systick_delay(500);
	led7seg_setChar('2', FALSE);
	systick_delay(500);
	led7seg_setChar('1', FALSE);
	rgb_setLeds(2);
	systick_delay(500);
	led7seg_setChar('0', FALSE);
	systick_delay(500);
	led7seg_setChar(' ', FALSE);
	rgb_setLeds(0);

	oled_clearScreen(OLED_COLOR_BLACK);

}

void EMERGENCY_MODE(void) {

	uint8_t oled_emergency_duration[] = "",
			oled_emergency1[] = "EMERGENCY mode",
			oled_emergency2[] = "Duration: 0s",
			oled_emergency3[] = "Duration: 1s",
			oled_emergency4[] = "Duration: 2s",
			oled_emergency5[] = "Duration: 3s",
			oled_emergency6[] = "Duration: 4s",
			oled_emergency7[] = "Duration: 5s";
	uint32_t counter = 0;

	oled_putString(5, 5, &oled_emergency1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

	while (1) {

		sprintf(oled_emergency_duration, "Duration: %us", counter);
		oled_putString(5, 45, &oled_emergency_duration, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
		counter++;

		rgb_setLeds(2);
		systick_delay(500);
		rgb_setLeds(1);
		systick_delay(500);

	}

//		oled_putString(5, 45, &oled_emergency2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//		systick_delay(1000);
//		oled_putString(5, 45, &oled_emergency3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//		systick_delay(1000);
//		oled_putString(5, 45, &oled_emergency4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//		systick_delay(1000);
//		oled_putString(5, 45, &oled_emergency5, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//		systick_delay(1000);
//		oled_putString(5, 45, &oled_emergency6, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//		systick_delay(1000);
//		oled_putString(5, 45, &oled_emergency7, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

}

int main(void) {

	uint8_t sw3 = 1, sw3_counter = 0;
//	uint8_t sw4 = 1;

	uint8_t acc_x = 0, acc_y = 0, acc_z = 0;
	uint8_t acc_x_init = 0, acc_y_init = 0, acc_z_init = 0;
	float acc_net_sq = 0, g_value = 0;

	uint32_t light_value = 0;

	uint8_t oled_init1[] = "Initialisation",
			oled_init2[] = "mode. Press",
			oled_init3[] = "TOGGLE to",
			oled_init4[] = "climb",
			oled_climb[] = "CLIMB",
			oled_acc[] = "",
			oled_light[] = "";
//			oled_temp[] = "";

//	float temp_value = 0.0;



	init_i2c();												// Initializing core peripherals
	init_GPIO();
	init_ssp();

	LPC_GPIOINT->IO2IntEnF |= 1<<10;						// Enable GPIO Interrupt P2.10
	NVIC_EnableIRQ(EINT3_IRQn);								// Enable EINT3 interrupt

	acc_init();												// Initializing external peripherals
	led7seg_init();
	led7seg_setChar(' ', FALSE);
	light_enable();
	light_setRange(LIGHT_RANGE_16000);
	oled_init();
	oled_clearScreen(OLED_COLOR_BLACK);
	rgb_init();
//	temp_init(&msTicks);

	oled_putString(5, 5, &oled_init1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(5, 15, &oled_init2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(5, 25, &oled_init3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(5, 35, &oled_init4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



	if (SysTick_Config(SystemCoreClock / 1000)) {

		while (1);  										// Capture error

	}



	while (1) {

		sw3 = (GPIO_ReadValue(2) >> 10) & 0x1;

		if (sw3 == 0) {

			sw3_counter++;
			printf("\n");

		}

		if (sw3_counter == 1) {								// When sw3 (MODE_TOGGLE) is pressed, device transitions to CLIMB mode

			COUNTDOWN();

			oled_putString(5, 5, &oled_climb, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			acc_read(&acc_x_init, &acc_y_init, &acc_z_init);
			sw3_counter++;

		}

		if (sw3_counter > 1) {								// After transition, device is in CLIMB mode

			acc_read(&acc_x, &acc_y, &acc_z);
			acc_net_sq = pow(acc_x - acc_x_init, 2) + pow(acc_y - acc_y_init, 2) + pow(acc_z - acc_z_init, 2);
			g_value = sqrt(acc_net_sq) / 64;
			light_value = light_read();
//			temp_value = temp_read();

			sprintf(oled_acc, "Acc: %.2f g", g_value);
			oled_putString(5, 25, &oled_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			sprintf(oled_light, "Light: %u lux", light_value);
			oled_putString(5, 35, &oled_light, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//			sprintf(oled_temp, "Temp: %.1f deg", temp_value/10);
//			oled_putString(5, 45, &oled_temp, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			if (light_value <= 17) {pca9532_setLeds(0xFFFF, 0xFFFF);}				// Super messy code, will fix later
			else if (light_value <= 23) {pca9532_setLeds(0x7FFF, 0xFFFF);}			// The reason why I put these particular light_values is that light works in a logarithmic scale
			else if (light_value <= 33) {pca9532_setLeds(0x3FFF, 0xFFFF);}			// Hence, you cannot split the light values evenly from 0 to 300 lux because then the LEDs will not light up proportionately
			else if (light_value <= 47) {pca9532_setLeds(0x1FFF, 0xFFFF);}
			else if (light_value <= 66) {pca9532_setLeds(0x0FFF, 0xFFFF);}
			else if (light_value <= 94) {pca9532_setLeds(0x07FF, 0xFFFF);}
			else if (light_value <= 133) {pca9532_setLeds(0x03FF, 0xFFFF);}
			else if (light_value <= 188) {pca9532_setLeds(0x01FF, 0xFFFF);}
			else if (light_value <= 265) {pca9532_setLeds(0x00FF, 0xFFFF);}
			else if (light_value <= 375) {pca9532_setLeds(0x007F, 0xFFFF);}
			else if (light_value <= 530) {pca9532_setLeds(0x003F, 0xFFFF);}
			else if (light_value <= 750) {pca9532_setLeds(0x001F, 0xFFFF);}
			else if (light_value <= 1060) {pca9532_setLeds(0x000F, 0xFFFF);}
			else if (light_value <= 1500) {pca9532_setLeds(0x0007, 0xFFFF);}
			else if (light_value <= 2120) {pca9532_setLeds(0x0003, 0xFFFF);}
			else if (light_value <= 3000) {pca9532_setLeds(0x0001, 0xFFFF);}
			else {pca9532_setLeds(0x0000, 0xFFFF);}


//			if (g_value >= 0.1) {
//				EMERGENCY_MODE();
//			}

			systick_delay(100);

		}
	}
}

void check_failed(uint8_t *file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
}


