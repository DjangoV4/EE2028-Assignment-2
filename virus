/*****************************************************************************
testing testing 123
 ******************************************************************************/
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"
#include "stdio.h"
#include "math.h"
#include <string.h>
#include "joystick.h"
#include "pca9532.h"
#include "acc.h"
#include "oled.h"
#include "rgb.h"
#include "light.h"
#include "temp.h"
#include "led7seg.h"
#include "rotary.h"
#include "lpc17xx_rit.h";
#include "lpc17xx_uart.h"
volatile uint8_t redon = 0x1;
volatile uint8_t blueon = 0x0;
volatile uint8_t alternateled = 0x0;
volatile uint8_t blinkblue = 0x0;
volatile uint8_t toggle = 0x0;
volatile uint8_t initialmode = 0x0;
volatile uint8_t climbmode = 0x0;
volatile uint8_t emergencymode = 0x0;
volatile int i = 0;
volatile int j = 0;
volatile int k = 0;
volatile int climbflag = 0;
volatile int emerflag = 0;
volatile int uarttimer = 0;
volatile int emergencyduration = 0;
volatile int emergencystart = 0;
volatile int modesent = 0;
volatile char line1[15] = "";
volatile char line2[15] = "";
volatile char line3[15] = "";
volatile char line4[15] = "";
uint32_t msTicks = 0;
volatile uint32_t halfsecs = 0;
volatile int tempthreshold = 28;
volatile float accthreshold = 0.1;
volatile int lightthreshold = 3000;
uint8_t uartcommand = 0;

static char* msg = NULL;
uint8_t uartmsg[80];
uint8_t uartemergency[50];
uint8_t uartlight[50];
uint8_t uartacc[50];
uint8_t uarttemp[50];
uint8_t uartjoystick[50];
uint8_t uartreply[50];
int rotaread = 0;
static void init_i2c(void)
{
 PINSEL_CFG_Type PinCfg;
 /* Initialize I2C2 pin connect */
 PinCfg.Funcnum = 2;
 PinCfg.Pinnum = 10;
 PinCfg.Portnum = 0;
 PINSEL_ConfigPin(&PinCfg);
 PinCfg.Pinnum = 11;
 PINSEL_ConfigPin(&PinCfg);
 PinCfg.Funcnum = 0;
 PinCfg.Pinnum = 2;
 PinCfg.Portnum = 5;
 PINSEL_ConfigPin(&PinCfg);
 // Initialize I2C peripheral
 I2C_Init(LPC_I2C2, 100000);
 /* Enable I2C1 operation */
 I2C_Cmd(LPC_I2C2, ENABLE);
}
//  SysTick_Handler - just increment SysTick counter

static void lightblink(void)
{
 if(alternateled){
  if( halfsecs >=i){
  blueon = blueon^1;
  redon = blueon^1;
  GPIO_SetDir(2, 1<<0, redon);
  GPIO_SetDir(0, 1<<26, blueon);
  i = halfsecs;
  }
 }
}

static void climbuart(void)
{
   //UART readings
   UART_Send(LPC_UART3, (uint8_t *)uartlight , strlen(uartlight), BLOCKING);
   UART_Send(LPC_UART3, (uint8_t *)uarttemp , strlen(uarttemp), BLOCKING);
   UART_Send(LPC_UART3, (uint8_t *)uartacc , strlen(uartacc), BLOCKING);
   if (emergencymode){
    UART_Send(LPC_UART3, (uint8_t *)uartemergency , strlen(uartemergency), BLOCKING);
    modesent = 1;
  }
}

void SysTick_Handler(void) {
 msTicks++;
}
// systick_delay - creates a delay of the appropriate number of Systicks (happens every 1 ms)
__INLINE static void systick_delay (uint32_t delayTicks) {
  uint32_t currentTicks;
  currentTicks = msTicks; // read current tick counter
  // Now loop until required number of ticks passes
  while ((msTicks - currentTicks) < delayTicks);
}
static void init_ssp(void)
{
 SSP_CFG_Type SSP_ConfigStruct;
 PINSEL_CFG_Type PinCfg;
 /*
  * Initialize SPI pin connect
  * P0.7 - SCK;
  * P0.8 - MISO
  * P0.9 - MOSI
  * P2.2 - SSEL - used as GPIO
  */
 PinCfg.Funcnum = 2;
 PinCfg.OpenDrain = 0;
 PinCfg.Pinmode = 0;
 PinCfg.Portnum = 0;
 PinCfg.Pinnum = 7;
 PINSEL_ConfigPin(&PinCfg);
 PinCfg.Pinnum = 8;
 PINSEL_ConfigPin(&PinCfg);
 PinCfg.Pinnum = 9;
 PINSEL_ConfigPin(&PinCfg);
 PinCfg.Funcnum = 0;
 PinCfg.Portnum = 2;
 PinCfg.Pinnum = 2;
 PINSEL_ConfigPin(&PinCfg);
 SSP_ConfigStructInit(&SSP_ConfigStruct);
 // Initialize SSP peripheral with parameter given in structure above
 SSP_Init(LPC_SSP1, &SSP_ConfigStruct);
 // Enable SSP peripheral
 SSP_Cmd(LPC_SSP1, ENABLE);
}
static void init_GPIO(void)
{
 PINSEL_CFG_Type PinCfg;
 PinCfg.Funcnum = 1;
 PinCfg.Pinnum = 10;
 PinCfg.Portnum = 2;
 PINSEL_ConfigPin(&PinCfg);
 PinCfg.Funcnum = 0;
 PinCfg.Pinnum = 2;
 PinCfg.Portnum = 0;
 PINSEL_ConfigPin(&PinCfg);
 PinCfg.Funcnum = 0;
 PinCfg.OpenDrain = 0;
 PinCfg.Pinmode = 0;
 PinCfg.Portnum = 1;
 PinCfg.Pinnum = 31;
 PINSEL_ConfigPin(&PinCfg);
 GPIO_SetDir(1, 1<<31, 0);
 GPIO_SetDir(0,(1<<2),0);
 GPIO_SetDir(2, (1 << 5), 0);
 GPIO_SetDir(2, (1 << 10), 0);
}
static void accelread(int32_t xci,int32_t yci,int32_t zci)
{
	int8_t x = 0;
	int8_t y = 0;
	int8_t z = 0;
	int32_t xan = 0;
	int32_t yan = 0;
   int32_t zan = 0;
   float netacc = 0;
 acc_read(&x,&y,&z);
	 xan = x - xci;
 	 yan = y - yci;
  	zan = z - zci;
  	netacc = sqrt((xan*xan+yan*yan+zan*zan));
  	sprintf(uartacc, "Acc: %.2f g 	\r\n", netacc*2/127);
  	if(netacc>(accthreshold*63)){
    if (!emerflag) {
     emerflag = 1;
     sprintf(uartmsg, "EMERGENCY! \r\n");
     UART_Send(LPC_UART3, (uint8_t *)uartmsg , strlen(uartmsg), BLOCKING);
    }
  	 emergencymode = 1;
  	 initialmode = 0;
  	 climbmode = 0;
  	 climbflag = 0;
  	 oled_putString(0, 40, (uint8_t *)line4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
  	}
//  	 printf("safe with %f\n",netacc);
  	 sprintf(line4, "Acc: %.2f g    ", netacc*2/127);
  	 oled_putString(0, 40, (uint8_t *)line4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
}
static void lightread(void){
 uint32_t lightreading = 0x0;
 uint16_t ledOnMask = 0;
 int ledson =0;
 uint16_t ledOffMask = 0xffff;
 lightreading = light_read();
 sprintf(uartlight, "Light: %lu lux  \r\n", lightreading);
 if (lightreading>lightthreshold){
 sprintf(line3, "Light: %lu lux  ", lightreading);
 oled_putString(0, 30, (uint8_t *)line3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 ledOnMask = 0;
 ledOffMask = 0xffff;
 }
 else{
  sprintf(line3, "DIM            ");
  oled_putString(0, 30, (uint8_t *)line3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
  ledson = (int) 16-(log(lightreading)/log(2));
  ledOnMask = pow(2,ledson) - 1;
 }
 pca9532_setLeds (ledOnMask,ledOffMask);
}
static void tempread(void){
 float tempreading = 0;
 tempreading = temp_read();
 sprintf(uarttemp, "Temp: %.1f deg	\r\n", tempreading/10);
 if ((tempreading>(tempthreshold*10)) && (climbmode == 1)){
   sprintf(line2, "REST NOW     	", tempreading);
   oled_putString(0, 20, (uint8_t *)line2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
   systick_delay(3000);
   sprintf(line2, "Temp: %.1f deg  ", tempreading/10);
   oled_putString(0, 20, (uint8_t *)line2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
  }
  else{
  sprintf(line2, "Temp: %.1f deg  ", tempreading/10);
  oled_putString(0, 20, (uint8_t *)line2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
  }
 }

static uint32_t tempticks(void)
{
 return msTicks;
}
void EINT0_IRQHandler(void)
{
// int i;
 // Determine whether GPIO Interrupt P2.10 has occurred
 if ((LPC_SC->EXTINT>>0)& 0x1)
 {
  toggle = 0x1;
    	LPC_SC->EXTINT |= 1<<0;
 }
}
void EINT3_IRQHandler(void)
{
// int i;
 // Determine whether GPIO Interrupt P2.10 has occurred
 if ((LPC_GPIOINT->IO0IntStatF>>17)& 0x1)
 {sprintf(uartjoystick, "Reset values acc: 0.1g temp: 28deg light: 3000lux\r\n");
  tempthreshold = 28;
  accthreshold = 0.1;
  lightthreshold = 3000;
  LPC_GPIOINT->IO0IntClr |= 1<<17;
 }
 if ((LPC_GPIOINT->IO0IntStatF>>15)& 0x1)
 {	 tempthreshold = tempthreshold - 1;
 sprintf(uartjoystick, "Temp decreased to :%d\r\n",tempthreshold);
 LPC_GPIOINT->IO0IntClr |= 1<<15;
 }
 if ((LPC_GPIOINT->IO0IntStatF>>16)& 0x1)
 {	 accthreshold = accthreshold + 0.1;
 sprintf(uartjoystick, "Acc increased to :%.1f\r\n",accthreshold);
 LPC_GPIOINT->IO0IntClr |= 1<<16;
 }
 if ((LPC_GPIOINT->IO2IntStatF>>3)& 0x1)
 {	 tempthreshold = tempthreshold + 1;
 sprintf(uartjoystick, "Temp increased to :%d\r\n",tempthreshold);
 LPC_GPIOINT->IO2IntClr |= 1<<3;
 }
 if ((LPC_GPIOINT->IO2IntStatF>>4)& 0x1)
 {	 accthreshold = accthreshold - 0.1;
 sprintf(uartjoystick, "Acc decreased to :%.1f\r\n",accthreshold);
 LPC_GPIOINT->IO2IntClr |= 1<<4;
 }
 if ((LPC_GPIOINT->IO0IntStatF>>24)& 0x1)
 {	 lightthreshold = lightthreshold + 100;
 rotaread = rotary_read ();
// printf("%d\n",rotaread);
 sprintf(uartjoystick, "Light increased to :%d\r\n",lightthreshold);
 LPC_GPIOINT->IO0IntClr |= 1<<24;
 LPC_GPIOINT->IO0IntClr |= 1<<25;
 }
 if ((LPC_GPIOINT->IO0IntStatF>>25)& 0x1)
 {	 lightthreshold = lightthreshold - 100;
 rotaread = rotary_read ();
// printf("%d\n",rotaread);
 sprintf(uartjoystick, "Light decreased to :%d\r\n",lightthreshold);
 LPC_GPIOINT->IO0IntClr |= 1<<24;
 LPC_GPIOINT->IO0IntClr |= 1<<25;
 }
 UART_Send(LPC_UART3, (uint8_t *)uartjoystick , strlen(uartjoystick), BLOCKING);
}
void initialisation(void)
{
 if(initialmode){
  static int initialized = 0;
  if (!initialized) {
   initialized = 1;
   sprintf(uartmsg, "Start\r\n");
   UART_Send(LPC_UART3, (uint8_t *)uartmsg , strlen(uartmsg), BLOCKING);
  }
 pca9532_setLeds (0x00,0xFF);
 char line1[15] = "";
 sprintf(line1, "Initialization ");
 sprintf(line2, "mode.      	");
 sprintf(line3, "Press TOGGLE to");
 sprintf(line4, " climb     	");
 oled_putString(0, 20, (uint8_t *)line1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 oled_putString(0, 30, (uint8_t *)line2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 oled_putString(0, 40, (uint8_t *)line3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 oled_putString(0, 50, (uint8_t *)line4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 if (toggle == 1){
 blinkblue = 1;
 lightblink();
 sprintf(line1, "INITIALIZATION ");
 sprintf(line2, "COMPLETE.  	");
 sprintf(line3, "ENTERING CLIMB ");
 sprintf(line4, "MODE       	");
 oled_putString(0, 20, (uint8_t *)line1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 oled_putString(0, 30, (uint8_t *)line2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 oled_putString(0, 40, (uint8_t *)line3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 oled_putString(0, 50, (uint8_t *)line4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 led7seg_setChar(0x30, 1 );
 GPIO_SetDir(2, 1<<0, 1);
 GPIO_SetDir(0, 1<<26, 0);
 systick_delay(500);
 led7seg_setChar(0x20, 1 );
 systick_delay(500);
 led7seg_setChar(0x7C, 1 );
 GPIO_SetDir(0, 1<<26, 1);
 systick_delay(500);
 led7seg_setChar(0x22, 1);
 systick_delay(500);
 led7seg_setChar(0x32, 1 );
 GPIO_SetDir(0, 1<<26, 0);
 systick_delay(500);
 led7seg_setChar(0x39, 1 );
 systick_delay(500);
 led7seg_setChar(0x70, 1 );
 GPIO_SetDir(0, 1<<26, 1);
 systick_delay(500);
 led7seg_setChar(0xE0, 1 );
 systick_delay(500);
 led7seg_setChar(0xAF, 1 );
 GPIO_SetDir(0, 1<<26, 0);
 systick_delay(500);
 led7seg_setChar(0x24, 1 );
 systick_delay(500);
 blinkblue = 0;
 led7seg_setChar(0xFF, 0 );
 GPIO_SetDir(2, 1<<0, 1);
 GPIO_SetDir(0, 1<<26, 1);
 oled_clearScreen(OLED_COLOR_BLACK);
 initialmode = 0;
 climbmode = 1;
 emergencymode = 0;
 }
 }
}
void emergency(int32_t xci,int32_t yci,int32_t zci){
 if(emergencymode){
 pca9532_setLeds (0x00,0xFFFF);
 sprintf(line1, "EMERGENCY Mode!");
 oled_putString(0, 10, (uint8_t *)line1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 alternateled = 1;
 sprintf(line3, "%d sec    	",(int) (halfsecs-emergencystart-1)/2);
 oled_putString(0, 30, (uint8_t *)line3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 accelread(xci,yci,zci);
 tempread();
 int8_t sw4 = (GPIO_ReadValue(1) >> 31) & 0x01;
 if (toggle == 1){
  if(sw4 == 0){
   sprintf(uartmsg, "Emergency is cleared! Time consumed for recovery: %i sec\r\n",(int) (halfsecs-emergencystart-1)/2);
   UART_Send(LPC_UART3, (uint8_t *)uartmsg , strlen(uartmsg), BLOCKING);
   climbmode = 1;
   emergencymode = 0;
   initialmode = 0;
   alternateled = 0;
   emerflag = 0;
   led7seg_setChar(0x32, 1 );
   systick_delay(1000);
   led7seg_setChar(0x28, 1);
   systick_delay(1000);
   led7seg_setChar(0x25, 1);
   systick_delay(1000);
   led7seg_setChar(0xA2, 1 );
   systick_delay(1000);
   led7seg_setChar(0x24, 1 );
   systick_delay(1000);
   led7seg_setChar(0xFF, 0 );
   GPIO_SetDir(2, 1<<0, 1);
   GPIO_SetDir(0, 1<<26, 1);
   oled_clearScreen(OLED_COLOR_BLACK);
   emergencyduration = 0;
   modesent = 0;
  }
 }
 }
 else{
  emergencystart = halfsecs;
 }
}
void climbing(int32_t xci,int32_t yci,int32_t zci){
 if (climbmode){
	 if(!climbflag){
		 sprintf(uartmsg, "CLIMB mode \r\n");
		 UART_Send(LPC_UART3, (uint8_t *)uartmsg , strlen(uartmsg), BLOCKING);
		 climbflag = 1;
	 }
 sprintf(line1, "CLIMB      	");
 oled_putString(0, 10, (uint8_t *)line1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
 accelread(xci,yci,zci);
 tempread();
 lightread();
 }
}

void init_uart(void){
 UART_CFG_Type uartCfg;
 uartCfg.Baud_rate = 115200;
 uartCfg.Databits = UART_DATABIT_8;
 uartCfg.Parity = UART_PARITY_NONE;
 uartCfg.Stopbits = UART_STOPBIT_1;
 //pin select for uart3;
 pinsel_uart3();
 //supply power & setup working parameters for uart3
 UART_Init(LPC_UART3, &uartCfg);
 //enable transmit for uart3
 UART_TxCmd(LPC_UART3, ENABLE);
}

void pinsel_uart3(void){
 PINSEL_CFG_Type PinCfg;
 PinCfg.Funcnum = 2;
 PinCfg.Pinnum = 0;
 PinCfg.Portnum = 0;
 PINSEL_ConfigPin(&PinCfg);
 PinCfg.Pinnum = 1;
 PINSEL_ConfigPin(&PinCfg);
}

void UART3_IRQHandler(void){
 UART_Receive(LPC_UART3, &uartcommand, 1, BLOCKING);
 switch (uartcommand){
 case 'q':
	 tempthreshold = tempthreshold + 1;
	 sprintf(uartjoystick, "\r\nTemp increased to :%d\r\n",tempthreshold);
  break;
 case 'a':
	 tempthreshold = tempthreshold - 1;
	 sprintf(uartjoystick, "\r\nTemp decreased to :%d\r\n",tempthreshold);
  break;
 case 'w':
  accthreshold = accthreshold + 0.1;
  sprintf(uartjoystick, "\r\nAcc increased to :%.1f\r\n",accthreshold);
  break;
 case 's':
  accthreshold = accthreshold - 0.1;
  sprintf(uartjoystick, "\r\nAcc decreased to :%.1f\r\n",accthreshold);
  break;
 case 'e':
  lightthreshold = lightthreshold + 100;
  sprintf(uartjoystick, "\r\nLight increased to :%d\r\n",lightthreshold);
  break;
 case 'd':
  lightthreshold = lightthreshold - 100;
  sprintf(uartjoystick, "\r\nLight decreased to :%d\r\n",lightthreshold);
  break;
 case 'z':
  sprintf(uartjoystick, "\r\nReset values acc: 0.1g temp: 28deg light: 3000lux\r\n");
  tempthreshold = 28;
  accthreshold = 0.1;
  lightthreshold = 3000;
  break;
 default:
  sprintf(uartjoystick, "");
  break;
 }
 UART_Send(LPC_UART3, (uint8_t *)uartjoystick , strlen(uartjoystick), BLOCKING);
}

void TIMER0_IRQHandler(void){
 halfsecs++;
 if(alternateled){
  if(halfsecs%1==0){
   blueon = blueon^1;
   redon = blueon^1;
   GPIO_SetDir(2, 1<<0, redon);
   GPIO_SetDir(0, 1<<26, blueon);
  }
 }
 if(halfsecs%10==0){
  if(climbmode){
  climbuart();
  }
 }
 if(halfsecs%2==0){
  if(emergencymode){
   sprintf(line3, "%d sec    	",(int) (halfsecs-emergencystart-1)/2);
  }
  if(((halfsecs-emergencystart-1)/2)%5==0){
   if(emergencymode){
   sprintf(uartemergency, "%i sec elapsed since entering EMERGENCY mode\r\n",(int) (halfsecs-emergencystart-1)/2);
   climbuart();
   }
    }
 }
 LPC_TIM0->IR |= 1<<0;
}

int main (void) {
 init_uart();
 init_ssp();
 init_i2c();
 rgb_init();
 acc_init();
 oled_init();
 init_GPIO();
 oled_clearScreen(OLED_COLOR_BLACK);
 light_init ();
 light_enable ();
 light_setWidth(LIGHT_WIDTH_16BITS);
 light_setRange(LIGHT_RANGE_4000);
 temp_init (&tempticks);
 pca9532_init ();
 led7seg_init ();
 int32_t test = 0;
 GPIO_SetDir(2, 1<<0, 1);
 GPIO_SetDir(0, 1<<26, 1);
 led7seg_setChar(0xFF, 0 );
 joystick_init ();
 	int32_t xci = 0;
 	int32_t yci = 0;
 	int32_t zci = 0;
 	int8_t x = 0;
 	int8_t y = 0;
 	int8_t z = 0;
    	acc_read(&x,&y,&z);
    	xci = x;
    	yci = y;
    	zci = z;
   if (SysTick_Config(SystemCoreClock / 1000)) {
	 }
    LPC_SC->EXTINT |= 1<<0;
    LPC_SC->EXTMODE |= 1<<0;
  NVIC_EnableIRQ(EINT0_IRQn);
  LPC_GPIOINT->IO0IntEnF |= 1<<17;
  LPC_GPIOINT->IO0IntEnF |= 1<<15;
  LPC_GPIOINT->IO0IntEnF |= 1<<16;
    LPC_GPIOINT->IO2IntEnF |= 1<<3;
    LPC_GPIOINT->IO2IntEnF |= 1<<4;
    LPC_GPIOINT->IO0IntEnF |= 1<<24;
    LPC_GPIOINT->IO0IntEnF |= 1<<25;
  NVIC_EnableIRQ(EINT3_IRQn);
  UART_FIFO_CFG_Type UartCfg;
  UartCfg.FIFO_ResetRxBuf = 0;
  UartCfg.FIFO_ResetTxBuf = 0;
  UartCfg.FIFO_DMAMode = 0;
  UartCfg.FIFO_Level = 0;
  UART_FIFOConfig(LPC_UART3, &UartCfg);
  UART_IntConfig(LPC_UART3, UART_INTCFG_RBR, ENABLE);
  NVIC_EnableIRQ(UART3_IRQn);
   initialmode = 1;
   TIM_TIMERCFG_Type TimeCfg;
   TimeCfg.PrescaleOption = TIM_PRESCALE_USVAL;
   TimeCfg.PrescaleValue = 0;
   TIM_MATCHCFG_Type MatchCfg;
   MatchCfg.MatchChannel = 0;
   MatchCfg.IntOnMatch = ENABLE;
   MatchCfg.ResetOnMatch = ENABLE;
   MatchCfg.StopOnMatch = DISABLE;
   MatchCfg.ExtMatchOutputType = 0;
   MatchCfg.MatchValue = TIM_ConverUSecToVal (0,500000);
   TIM_ConfigMatch(LPC_TIM0, &MatchCfg);
   TIM_Cmd(LPC_TIM0, ENABLE);
   NVIC_EnableIRQ(TIMER0_IRQn);

 while(1){
  initialisation();
  emergency(xci,yci,zci);
  climbing(xci,yci,zci);
//  printf("%i\n",LPC_RIT->RICOUNTER);
   }
}


void check_failed(uint8_t *file, uint32_t line)
{
 /* User can add his own implementation to report the file name and line number,
  ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 /* Infinite loop */
 while(1);
}
